import java_cup.runtime.*;

/* Parser Definition */
parser code {:
    // Connect this parser to a scanner
    Scanner s;
    Parser(Scanner s) { this.s = s; }
:}

/* Connect the scanner */
scan with {: return s.next_token(); :};

/* Terminals (tokens returned by the scanner) */
terminal CONCAT, LPAREN, RPAREN, RBRAC, COMMA, PREFIX, SUFFIX, EQUAL, REVERSE, IF, ELSE, IDENTIFIER, FUNCPARBRAC;
terminal String STRING_LITERAL;

/* Non-terminals */
non terminal S, FuncDef, FuncCallMain, ArgsFuncDef, ArgsFuncDef1, ArgsFuncCallMain, ArgsFuncCallMain1, ExpInDef, ExpInMain,
                IfElse, IfLog, AccInDef, FuncCallDef, ArgsFuncCallDef, ArgsFuncCallDef1, IfElseMain, IfLogMain, AccInMain, MainCalls;

/* Precedence */
precedence left IF;
precedence left CONCAT;
precedence left REVERSE;

/******** Grammar Rules ********/
S ::= FuncDef:funcDef MainCalls:callsMain
        {: System.out.println("public class Translated {\n\tpublic static void main(String[] args) {\n" + callsMain + "\t}" + funcDef + "\n}"); :}
;

/******** Expressions in main ********/
FuncCallMain ::= IDENTIFIER:func LPAREN ArgsFuncCallMain:args RPAREN  {: RESULT = func + "(" + args + ")"; :}
;

ArgsFuncCallMain ::= ExpInMain:arg ArgsFuncCallMain1:args  {: RESULT = "" +  arg + args; :}
                   |                                       {: RESULT = ""; :}
;
ArgsFuncCallMain1 ::= COMMA ExpInMain:arg ArgsFuncCallMain1:args  {: RESULT = ", " + arg + args; :}
                    |                                             {: RESULT = ""; :}
;

// If-else statement in main
IfElseMain ::= IF LPAREN IfLogMain:ifLog RPAREN ExpInMain:ifBlock ELSE ExpInMain:elseBlock {: RESULT = "(" + ifLog + " ? " + ifBlock + " : " + elseBlock + ")"; :}
;
IfLogMain ::= ExpInMain:exp1 EQUAL ExpInMain:exp2   {: RESULT = "(" + exp1 + ")" + ".equals(" + exp2 + ")"; :}
            | ExpInMain:exp1 PREFIX ExpInMain:exp2  {: RESULT = exp2 + ".startsWith(" + exp1 + ")"; :}
            | ExpInMain:exp1 SUFFIX ExpInMain:exp2  {: RESULT = exp2 + ".endsWith(" + exp1 + ")"; :}
;

// Expressions that can be used in main
AccInMain ::= STRING_LITERAL:str  {: RESULT = "\"" + str + "\""; :}
            | IfElseMain:ifElse   {: RESULT = ifElse; :}
;

// Operations between allowed expressions in main
ExpInMain ::= REVERSE ExpInMain:exp                {: RESULT = "new StringBuilder(" + exp + ").reverse().toString()"; :}
            | ExpInMain:exp CONCAT ExpInMain:exp1  {: RESULT = exp + " + " + exp1; :}
            | AccInMain:acc                        {: RESULT = acc; :}
            | FuncCallMain:funcCallMain            {: RESULT = funcCallMain; :}
;

// Print each command in main
MainCalls ::= ExpInMain:exp1 MainCalls:mainCalls  {: RESULT = "\t\tSystem.out.println(" + exp1 + ");\n" + mainCalls; :}
            |                                     {: RESULT = ""; :}
;

/******** Function Definition ********/
FuncDef ::= FuncDef:funcDef IDENTIFIER:func LPAREN ArgsFuncDef:args FUNCPARBRAC ExpInDef:exp RBRAC  {: RESULT = "\n\n\tpublic static String " + func +  "(" + args + ") {\n\t\treturn " + exp + ";\n\t}" + funcDef; :}
          | IDENTIFIER:func LPAREN ArgsFuncDef:args FUNCPARBRAC ExpInDef:exp RBRAC                  {: RESULT = "\n\n\tpublic static String " + func +  "(" + args + ") {\n\t\treturn " + exp + ";\n\t}"; :}
;

ArgsFuncDef ::= IDENTIFIER:arg ArgsFuncDef1:args  {: RESULT = "String " + arg + args; :}
              |                                   {: RESULT = ""; :}
;
ArgsFuncDef1 ::= COMMA IDENTIFIER:arg ArgsFuncDef1:args  {: RESULT = ", String " + arg + args; :}
               |                                         {: RESULT = ""; :}
;

// Function call in function definition (don't print in main)
FuncCallDef ::= IDENTIFIER:func LPAREN ArgsFuncCallDef:args RPAREN  {: RESULT = func + "(" + args + ")"; :}
;

ArgsFuncCallDef ::= ExpInDef:arg ArgsFuncCallDef1:args  {: RESULT = "" + arg + args; :}
                  |                                     {: RESULT = ""; :}
;
ArgsFuncCallDef1 ::= COMMA ExpInDef:arg ArgsFuncCallDef1:args  {: RESULT = ", " + arg + args; :}
                   |                                           {: RESULT = ""; :}
;

// If-Else statement in function definition
IfElse ::= IF LPAREN IfLog:ifLog RPAREN ExpInDef:ifBlock ELSE ExpInDef:elseBlock {: RESULT = "("+ ifLog + " ? " + ifBlock + " : " + elseBlock + ")"; :}
;
IfLog ::= ExpInDef:exp1 EQUAL  ExpInDef:exp2  {: RESULT = "(" + exp1 + ")" + ".equals(" + exp2 + ")"; :}
        | ExpInDef:exp1 PREFIX ExpInDef:exp2  {: RESULT = exp2 + ".startsWith(" + exp1 + ")"; :}
        | ExpInDef:exp1 SUFFIX ExpInDef:exp2  {: RESULT = exp2 + ".endsWith(" + exp1 + ")"; :}
;

// Expressions that can be used in function definition (calls, identifiers or literals)
AccInDef ::= STRING_LITERAL:str  {: RESULT = "\"" + str + "\""; :}
           | IDENTIFIER:str      {: RESULT = str; :}
           | IfElse:ifElse       {: RESULT = ifElse; :}
;

// Operations between allowed expressions in function definition
ExpInDef ::= REVERSE ExpInDef:exp               {: RESULT = "new StringBuilder(" + exp + ").reverse().toString()"; :}
           | ExpInDef:exp CONCAT ExpInDef:exp1  {: RESULT = exp + " + " + exp1; :}
           | AccInDef:acc                       {: RESULT = acc; :}
           | FuncCallDef:funcCallDef            {: RESULT = funcCallDef; :}
;
