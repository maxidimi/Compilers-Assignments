import java_cup.runtime.*;

/* Parser Definition */
parser code {:
    // Connect this parser to a scanner
    Scanner s;
    Parser(Scanner s) { this.s = s; }
:}

/* Connect the scanner */
scan with {: return s.next_token(); :};

/* Terminals (tokens returned by the scanner) */
terminal CONCAT, LPAREN, RPAREN, LBRAC, RBRAC, COMMA, PREFIX, SUFFIX, EQUAL, REVERSE, IF, ELSE, IDENTIFIER, FUNCPARBRAC;
terminal String STRING_LITERAL;

/* Non-terminals */
non terminal S, FuncDef, FuncCallMain, ArgsFuncDef, ArgsFuncDef1, ArgsFuncCallMain, ArgsFuncCallMain1, ExpInDef, ExpInMain,
                IfElse, IfLog, AccInDef, FuncCallMain1, FuncCallDef, ArgsFuncCallDef, ArgsFuncCallDef1;

/* Precedence (if needed) */
precedence left IF;
precedence left CONCAT;
precedence left REVERSE;

/******** Grammar Rules ********/
S ::= FuncDef:funcDef FuncCallMain:funcCallMain
        {: System.out.println("public class Translated {\n" + 
                            "\tpublic static void main(String[] args) {\n" + funcCallMain + "\n\t}"
                            + funcDef + "\n" +
                            "}"); :}
;

/******** Function Call in main ********/
FuncCallMain ::= IDENTIFIER:func LPAREN ArgsFuncCallMain:args RPAREN FuncCallMain:funcCallMain  {: RESULT = "\t\t" + "System.out.println(" + func + "(" + args + "));\n" + funcCallMain; :}
               |                                                                                {: RESULT = ""; :}
;

ArgsFuncCallMain ::= ExpInMain:arg ArgsFuncCallMain1:args  {: RESULT = "" +  arg + args; :}
                   |                                       {: RESULT = ""; :}
;
ArgsFuncCallMain1 ::= COMMA ExpInMain:arg ArgsFuncCallMain1:args  {: RESULT = ", " + arg + args; :}
                    |                                             {: RESULT = ""; :}
;

// Used for calls as arguments in other function calls (don't print in main)
FuncCallMain1 ::= IDENTIFIER:func LPAREN ArgsFuncCallMain:args RPAREN  {: RESULT = func + "(" + args + ")"; :}
;

// Expressions that can be used in main (calls or literals)
ExpInMain ::= STRING_LITERAL:str          {: RESULT = "\"" + str + "\""; :}
            | FuncCallMain1:funcCallMain  {: RESULT = funcCallMain; :}
            //? add concat, reverse and if-else
;

/******** Function Definition ********/
FuncDef ::= FuncDef:funcDef IDENTIFIER:func LPAREN ArgsFuncDef:args FUNCPARBRAC ExpInDef:exp RBRAC
                {: RESULT = "\n\tpublic static String " + func +  "(" + args + ") {\n\t\treturn " + exp + ";\n\t}" + funcDef; :}
          | IDENTIFIER:func LPAREN ArgsFuncDef:args FUNCPARBRAC ExpInDef:exp RBRAC
                {: RESULT = "\n\tpublic static String " + func +  "(" + args + ") {\n\t\treturn " + exp + ";\n\t}"; :}
;

ArgsFuncDef ::= IDENTIFIER:arg ArgsFuncDef1:args  {: RESULT = "String " + arg + args; :}
              |                                   {: RESULT = ""; :}
;
ArgsFuncDef1 ::= COMMA IDENTIFIER:arg ArgsFuncDef1:args  {: RESULT = ", String " + arg + args; :}
               |                                         {: RESULT = ""; :}
;

// Function calls in function definitions (don't print in main)
FuncCallDef ::= IDENTIFIER:func LPAREN ArgsFuncCallDef:args RPAREN  {: RESULT = func + "(" + args + ")"; :}
;

ArgsFuncCallDef ::= ExpInDef:arg ArgsFuncCallDef1:args  {: RESULT = "" + arg + args; :}
                  |                                     {: RESULT = ""; :}
;
ArgsFuncCallDef1 ::= COMMA ExpInDef:arg ArgsFuncCallDef1:args  {: RESULT = ", " + arg + args; :}
                    |                                          {: RESULT = ""; :}
;

// If-Else statement in function definitions
IfElse ::= IF LPAREN IfLog:ifLog RPAREN ExpInDef:ifBlock ELSE ExpInDef:elseBlock
            {: RESULT = ifLog + " ? " + ifBlock + " : " + elseBlock; :}
;
IfLog ::= AccInDef:exp1 EQUAL ExpInDef:exp2   {: RESULT = "\t" + exp1 + " == " + exp2; :}
        | ExpInDef:exp1 PREFIX ExpInDef:exp2  {: RESULT = "\t" + exp2 + ".startsWith(" + exp1 + ")"; :}
        | ExpInDef:exp1 SUFFIX ExpInDef:exp2  {: RESULT = "\t" + exp2 + ".endsWith(" + exp1 + ")"; :}
;

// Expressions that can be used in function definitions (calls, identifiers or literals)
AccInDef ::= STRING_LITERAL:str  {: RESULT = "\"" + str + "\""; :}
           | IDENTIFIER:str      {: RESULT = str; :}
           | IfElse:ifElse       {: RESULT = ifElse; :}
;

// Operations between permitted expressions in function definitions
ExpInDef ::= REVERSE ExpInDef:exp                {: RESULT = "new StringBuilder(" + exp + ").reverse().toString()"; :}
            | ExpInDef:exp CONCAT ExpInDef:exp1  {: RESULT = exp + " + " + exp1; :}
            | AccInDef:acc                       {: RESULT = acc; :}
            | FuncCallDef:funcCallMain           {: RESULT = funcCallMain; :}
;
