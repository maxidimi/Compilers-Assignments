/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, LPAREN, RPAREN, LBRAC, RBRAC, CONCAT, PREFIX, SUFFIX, REVERSE, IF, ELSE, IDENTIFIER;
terminal String     STRING_LITERAL;        // our scanner supports string literals

/*  Non terminals */
non terminal            expr_list;
non terminal Integer    expr;      // used to store evaluated subexpressions

/**
 *  Precedence Declarations
 */
precedence left REVERSE;
precedence left CONCAT;
precedence left IF;

/**
 *  The Grammar Rules
 */
expr_list ::= expr_list expr:e SEMI         {: System.out.println(e);         :}
            | expr:e SEMI                  {: System.out.println(e);         :}
            ;
