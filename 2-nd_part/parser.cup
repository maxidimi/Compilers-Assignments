import java_cup.runtime.*;

/* Parser Definition */
parser code {:
    // Connect this parser to a scanner
    Scanner s;
    Parser(Scanner s) { this.s = s; }
:}

/* Connect the scanner */
scan with {: return s.next_token(); :};

/* Terminals (tokens returned by the scanner) */
terminal CONCAT, LPAREN, RPAREN, LBRAC, RBRAC, COMMA, PREFIX, SUFFIX, REVERSE, IF, ELSE, IDENTIFIER;
terminal String STRING_LITERAL;

/* Non-terminals */
non terminal S, Statements, Statement, FuncDefMain, FuncCallMain, FuncCallInner, ArgsFuncCallMain, ArgsFuncCallInner, ArgsFuncDef;
non terminal ArgsFuncDef1, FuncDef, FuncExpr;

/* Precedence (if needed) */
precedence left IF;
precedence left CONCAT;
precedence left REVERSE;

/* Grammar Rules */
S ::= FuncDefMain:funcDefMain
        {: RESULT = funcDefMain; :}
    | FuncCallMain:funcCallMain
        {: RESULT = funcCallMain; :}
    | FuncCallInner:funcCallInner
        {: RESULT = funcCallInner; :}
    ;


/* Function Call */
ArgsFuncCallMain ::= STRING_LITERAL:str ArgsFuncCallMain
                {: RESULT = str; :}
              ;

FuncCallMain ::= IDENTIFIER:func LPAREN ArgsFuncCallMain:args RPAREN
                {: RESULT = "public static String " + func + "(" + args + ") {"; :}
              ;

ArgsFuncCallInner ::= STRING_LITERAL:str ArgsFuncCallInner
                {: RESULT = str; :}
            | IDENTIFIER:id ArgsFuncCallInner
                {: RESULT = id; :}
            |
              ;
FuncCallInner ::= IDENTIFIER:func LPAREN ArgsFuncCallInner:args RPAREN
                {: RESULT = "public static String " + func + "(" + args + ") {"; :}
            ;

/* Function Definition */
ArgsFuncDef ::= IDENTIFIER:id ArgsFuncDef1
                {: RESULT = id; :}
                ;

ArgsFuncDef1 ::= COMMA IDENTIFIER:id ArgsFuncDef1
                {: RESULT = ", " + id; :}
                |
                {: RESULT = ""; :}
                ;

FuncDef ::= IDENTIFIER:func LPAREN ArgsFuncDef:args RPAREN LBRAC FuncExpr:expr RBRAC
                {: RESULT = "public static String " + func + "(" + args + ") {" + expr + "}"; :}
            ;

FuncExpr ::= IDENTIFIER CONCAT STRING_LITERAL:str
                {: RESULT = "return " + str + ";"; :}
            |
            ;
