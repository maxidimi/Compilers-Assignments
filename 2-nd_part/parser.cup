import java_cup.runtime.*;

/* Parser Definition */
parser code {:
    // Connect this parser to a scanner
    Scanner s;
    Parser(Scanner s) { this.s = s; }
:}

/* Connect the scanner */
scan with {: return s.next_token(); :};

/* Terminals (tokens returned by the scanner) */
terminal CONCAT, LPAREN, RPAREN, LBRAC, RBRAC, COMMA, PREFIX, SUFFIX, REVERSE, IF, ELSE, IDENTIFIER;
terminal String STRING_LITERAL;

/* Non-terminals */
non terminal S, Statements, Statement, ArgumentList, Argument, FuncDef, Expression, ArgsDef, FuncCall;

/* Precedence (if needed) */
precedence left IF;
precedence left CONCAT;
precedence left REVERSE;

/* Grammar Rules */
S ::= Statements
    ;

Statements ::= Statement
            |
              ;

Statement ::= FuncDef:func Statements
              {: System.out.println(func); :}
            |  FuncCall:func Statements
              {: System.out.println(func); :}
              ;

FuncDef ::= IDENTIFIER:id LPAREN ArgsDef:args RPAREN LBRAC Expression RBRAC 
           {: RESULT = "public static String " + id + "(" + args + ") {\n\n}\n"; :}
          ;

ArgsDef ::= IDENTIFIER:id
             {: RESULT = id; :}
           |  ArgsDef:args COMMA IDENTIFIER:id
             {: RESULT = args + ", " + id; :}
           ;

FuncCall ::= IDENTIFIER:id LPAREN ArgumentList:args RPAREN
           {: RESULT = id + "(" + args + ")"; :}
          ;
          
ArgumentList ::= IDENTIFIER:id ArgumentList:args
                {: RESULT = id; :}
                | ArgumentList:args COMMA IDENTIFIER:id
                {: RESULT = args + ", " + id; :}
                | STRING_LITERAL:str
                {: RESULT = str; :}
                | ArgumentList:args COMMA STRING_LITERAL:str
                {: RESULT = args + ", " + str; :}
                | STRING_LITERAL:str ArgumentList:args
                {: RESULT = str + ", " + args; :}
                |
                ;

Expression ::= IDENTIFIER CONCAT Expression
                
              |

             ;
