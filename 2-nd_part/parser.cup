import java_cup.runtime.*;

/* Parser Definition */
parser code {:
    // Connect this parser to a scanner
    Scanner s;
    Parser(Scanner s) { this.s = s; }
:}

/* Connect the scanner */
scan with {: return s.next_token(); :};

/* Terminals (tokens returned by the scanner) */
terminal CONCAT, LPAREN, RPAREN, LBRAC, RBRAC, COMMA, PREFIX, SUFFIX, EQUAL, REVERSE, IF, ELSE, IDENTIFIER, FUNCPARBRAC;
terminal String STRING_LITERAL;

/* Non-terminals */
non terminal S, FuncDef, FuncCallMain, ArgsFuncDef, ArgsFuncDef1, ArgsFuncCallMain, ArgsFuncCallMain1, ExpInDef, ExpInMain,
                IfElse, IfLog, IfElseBlock;

/* Precedence (if needed) */
precedence left IF;
precedence left CONCAT;
precedence left REVERSE;

/* Grammar Rules */
S ::= FuncDef:funcDef FuncCallMain:funcCallMain
        {: System.out.println("public class Translated {\n" + 
                            "\tpublic static void main(String[] args) {\n" + funcCallMain + "\n\t}\n"
                            + funcDef + "\n" +
                            "}"); :}
    ;

/* If-Else statement */
IfElse ::= IF LPAREN IfLog:ifLog RPAREN LBRAC ExpInDef:ifBlock RBRAC ELSE LBRAC ExpInDef:elseBlock RBRAC
            {: RESULT = "if (" + ifLog + ") {\n" + ifBlock + "\n} else {\n" + elseBlock + "\n}"; :}
;

IfLog ::= ExpInDef:exp1 EQUAL ExpInDef:exp2
            {: RESULT = exp1 + " == " + exp2; :}
        | ExpInDef:exp1 PREFIX ExpInDef:exp2
            {: RESULT = exp2 + ".startsWith(" + exp1 + ")"; :}
        | ExpInDef:exp1 SUFFIX ExpInDef:exp2
            {: RESULT = exp2 + ".endsWith(" + exp1 + ")"; :}
        ;

/* Function Call in main */
ArgsFuncCallMain ::= ExpInMain:arg ArgsFuncCallMain1:args {: RESULT = "\"" + arg + "\"" + args; :}
                   |                                      {: RESULT = ""; :}
;

ArgsFuncCallMain1 ::= COMMA ExpInMain:arg ArgsFuncCallMain1:args {: RESULT = ", \"" + arg + "\"" + args; :}
                    |                                            {: RESULT = ""; :}
;

FuncCallMain ::= IDENTIFIER:func LPAREN ArgsFuncCallMain:args RPAREN FuncCallMain:funcCallMain
                {: RESULT = "\t\t" + "System.out.println(" + func + "(" + args + "));" + funcCallMain; :}
                | {: RESULT = ""; :}
;

/* Function Definition */
ArgsFuncDef ::= IDENTIFIER:arg ArgsFuncDef1:args {: RESULT = "String " + arg + args; :}
              |                                  {: RESULT = ""; :}
;

ArgsFuncDef1 ::= COMMA IDENTIFIER:arg ArgsFuncDef1:args {: RESULT = ", String " + arg + args; :}
               |                                        {: RESULT = ""; :}
;

FuncDef ::= FuncDef:funcDef IDENTIFIER:func LPAREN ArgsFuncDef:args FUNCPARBRAC ExpInDef:expr RBRAC
                {: RESULT = "\n\tpublic static String " + func +  "(" + args + ") {\n" + expr + "\n\t}" + funcDef; :}
            |
            IDENTIFIER:func LPAREN ArgsFuncDef:args FUNCPARBRAC ExpInDef:expr RBRAC
                {: RESULT = "\n\tpublic static String " + func +  "(" + args + ") {\n" + expr + "\n\t}"; :}
            ;

/* Expressions in function def block */
ExpInDef ::= IF LPAREN ExpInDef:expr RPAREN LBRAC ExpInDef:ifBlock RBRAC ELSE LBRAC ExpInDef:elseBlock RBRAC
            {: RESULT = "if (" + expr + ") {\n" + ifBlock + "\n} else {\n" + elseBlock + "\n}"; :}
            |
            IF LPAREN ExpInDef:expr RPAREN LBRAC ExpInDef:ifBlock RBRAC
            {: RESULT = "if (" + expr + ") {\n" + ifBlock + "\n}"; :}
            |
            {: RESULT = ""; :}
            ;
