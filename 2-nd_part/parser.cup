import java_cup.runtime.*;

/* Parser Definition */
parser code {:
    // Connect this parser to a scanner
    Scanner s;
    Parser(Scanner s) { this.s = s; }
:}

/* Connect the scanner */
scan with {: return s.next_token(); :};

/* Terminals (tokens returned by the scanner) */
terminal CONCAT, LPAREN, RPAREN, LBRAC, RBRAC, COMMA, PREFIX, SUFFIX, REVERSE, IF, ELSE, IDENTIFIER;
terminal String STRING_LITERAL;

/* Non-terminals */
non terminal S, FuncDef, FuncCallMain, FuncExpr, ArgsFuncDef, ArgsFuncDef1, ArgsFuncCallMain, ArgsFuncCallMain1;

/* Precedence (if needed) */
precedence left IF;
precedence left CONCAT;
precedence left REVERSE;

/* Grammar Rules */
S ::= FuncDef:funcDef FuncCallMain:funcCallMain
        {: System.out.println("class Translated {\n" + 
                            "\tpublic static void main(String[] args) {\n" + funcCallMain + "\n\t}\n"
                            + funcDef + "\n" +
                            "}\n"); :}
    ;

/* Function Call */
ArgsFuncCallMain ::= STRING_LITERAL:arg ArgsFuncCallMain1:args
            {: RESULT = "\"" + arg + "\"" + args; :}
            |
            {: RESULT = ""; :}
            ;

ArgsFuncCallMain1 ::= COMMA STRING_LITERAL:arg ArgsFuncCallMain1:args
            {: RESULT = ", \"" + arg + "\"" + args; :}
            |
            {: RESULT = ""; :}
            ;

FuncCallMain ::= IDENTIFIER:func LPAREN ArgsFuncCallMain:args RPAREN
                {: RESULT = "\t\t" + "System.out.println(" + func + "(" + args + "));"; :}
            ;

/* Function Definition */
ArgsFuncDef ::= IDENTIFIER:arg ArgsFuncDef1:args
            {: RESULT = "String " + arg + args; :}
            |
            {: RESULT = "void"; :}
            ;

ArgsFuncDef1 ::= COMMA IDENTIFIER:arg ArgsFuncDef1:args
            {: RESULT = ", String " + arg + args; :}
            |
            {: RESULT = ""; :}
            ;

FuncDef ::= IDENTIFIER:func LPAREN ArgsFuncDef:args RPAREN LBRAC FuncExpr:expr RBRAC
                {: RESULT = "\n\tpublic static String " + func +  "(" + args + ") {\n" + expr + "\n\t}"; :}
            ;

FuncExpr ::= IDENTIFIER:id CONCAT STRING_LITERAL:str
                {: RESULT = "\t\treturn " + id + " + \"" + str + "\";"; :}
            |
            {: RESULT = ""; :}
            ;
