
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141202 (SVN rev 60)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141202 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\004\000\002\002\004\000\002\004" +
    "\007\000\002\004\002\000\002\007\004\000\002\007\002" +
    "\000\002\010\005\000\002\010\002\000\002\017\006\000" +
    "\002\012\003\000\002\012\003\000\002\003\011\000\002" +
    "\003\010\000\002\005\004\000\002\005\002\000\002\006" +
    "\005\000\002\006\002\000\002\020\006\000\002\021\004" +
    "\000\002\021\002\000\002\022\005\000\002\022\002\000" +
    "\002\013\011\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\023\004\000\002\023\005\000\002\023" +
    "\003\000\002\023\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\011\004\000\002\011\005\000" +
    "\002\011\003\000\002\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\105\000\004\020\005\001\002\000\004\002\107\001" +
    "\002\000\004\005\101\001\002\000\006\002\ufffe\020\010" +
    "\001\002\000\004\002\001\001\002\000\004\005\011\001" +
    "\002\000\012\006\ufffc\020\014\021\ufff3\022\017\001\002" +
    "\000\004\006\075\001\002\000\006\006\ufffa\011\071\001" +
    "\002\000\010\005\061\011\065\021\ufff1\001\002\000\006" +
    "\006\ufff7\011\ufff7\001\002\000\004\021\020\001\002\000" +
    "\006\006\ufff8\011\ufff8\001\002\000\012\015\027\016\030" +
    "\020\022\022\026\001\002\000\014\004\uffde\006\uffde\010" +
    "\uffde\012\uffde\013\uffde\001\002\000\022\004\uffe2\005\061" +
    "\006\uffe2\010\uffe2\012\uffe2\013\uffe2\014\uffe2\017\uffe2\001" +
    "\002\000\014\004\uffdd\006\uffdd\010\uffdd\012\uffdd\013\uffdd" +
    "\001\002\000\006\004\037\010\060\001\002\000\020\004" +
    "\uffe1\006\uffe1\010\uffe1\012\uffe1\013\uffe1\014\uffe1\017\uffe1" +
    "\001\002\000\020\004\uffe3\006\uffe3\010\uffe3\012\uffe3\013" +
    "\uffe3\014\uffe3\017\uffe3\001\002\000\012\015\027\016\030" +
    "\020\022\022\026\001\002\000\004\005\031\001\002\000" +
    "\012\015\027\016\030\020\022\022\026\001\002\000\010" +
    "\004\037\012\053\013\054\001\002\000\004\006\041\001" +
    "\002\000\012\004\uffde\012\uffde\013\uffde\014\035\001\002" +
    "\000\012\015\027\016\030\020\022\022\026\001\002\000" +
    "\006\004\037\006\uffea\001\002\000\012\015\027\016\030" +
    "\020\022\022\026\001\002\000\014\004\uffdf\006\uffdf\010" +
    "\uffdf\012\uffdf\013\uffdf\001\002\000\012\015\045\016\030" +
    "\020\022\022\026\001\002\000\006\004\047\017\051\001" +
    "\002\000\020\004\uffe5\006\uffe5\010\uffe5\012\uffe5\013\uffe5" +
    "\014\uffe5\017\uffe5\001\002\000\020\004\uffe4\006\uffe4\010" +
    "\uffe4\012\uffe4\013\uffe4\014\uffe4\017\uffe4\001\002\000\012" +
    "\015\045\016\030\020\022\022\026\001\002\000\020\004" +
    "\uffe7\006\uffe7\010\uffe7\012\uffe7\013\uffe7\014\uffe7\017\uffe7" +
    "\001\002\000\012\015\045\016\030\020\022\022\026\001" +
    "\002\000\020\004\uffe6\006\uffe6\010\uffe6\012\uffe6\013\uffe6" +
    "\014\uffe6\017\uffe6\001\002\000\012\015\045\016\030\020" +
    "\022\022\026\001\002\000\020\004\047\006\uffeb\010\uffeb" +
    "\012\uffeb\013\uffeb\014\uffeb\017\uffeb\001\002\000\012\015" +
    "\027\016\030\020\022\022\026\001\002\000\012\015\027" +
    "\016\030\020\022\022\026\001\002\000\006\004\037\006" +
    "\uffe8\001\002\000\006\004\037\006\uffe9\001\002\000\014" +
    "\004\uffe0\006\uffe0\010\uffe0\012\uffe0\013\uffe0\001\002\000" +
    "\006\002\ufff6\020\ufff6\001\002\000\010\006\ufffc\020\063" +
    "\022\017\001\002\000\004\006\064\001\002\000\004\005" +
    "\061\001\002\000\022\004\ufff9\006\ufff9\010\ufff9\011\ufff9" +
    "\012\ufff9\013\ufff9\014\ufff9\017\ufff9\001\002\000\004\020" +
    "\067\001\002\000\004\021\ufff4\001\002\000\006\011\065" +
    "\021\ufff1\001\002\000\004\021\ufff2\001\002\000\006\020" +
    "\063\022\017\001\002\000\004\006\ufffd\001\002\000\006" +
    "\006\ufffa\011\071\001\002\000\004\006\ufffb\001\002\000" +
    "\006\002\ufffe\020\077\001\002\000\004\002\uffff\001\002" +
    "\000\004\005\100\001\002\000\010\006\ufffc\020\063\022" +
    "\017\001\002\000\006\020\102\021\ufff3\001\002\000\006" +
    "\011\065\021\ufff1\001\002\000\004\021\104\001\002\000" +
    "\012\015\027\016\030\020\022\022\026\001\002\000\006" +
    "\004\037\010\106\001\002\000\006\002\ufff5\020\ufff5\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\105\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\015\007\011\012" +
    "\012\017\014\001\001\000\002\001\001\000\004\010\071" +
    "\001\001\000\004\006\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\011\023\013\024" +
    "\016\020\017\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\011\056\013\024\016\020\017" +
    "\022\001\001\000\002\001\001\000\014\011\031\013\024" +
    "\014\032\016\033\017\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\011\035\013\024" +
    "\016\020\017\022\001\001\000\002\001\001\000\012\011" +
    "\037\013\024\016\020\017\022\001\001\000\002\001\001" +
    "\000\012\013\024\016\042\017\043\023\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\013\024\016\042\017\043\023\045\001\001\000\002\001" +
    "\001\000\012\013\024\016\042\017\043\023\047\001\001" +
    "\000\002\001\001\000\012\013\024\016\042\017\043\023" +
    "\051\001\001\000\002\001\001\000\012\011\055\013\024" +
    "\016\020\017\022\001\001\000\012\011\054\013\024\016" +
    "\020\017\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\061\012" +
    "\012\017\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\067\001\001\000\002\001\001\000\006\012\072" +
    "\017\014\001\001\000\002\001\001\000\004\010\073\001" +
    "\001\000\002\001\001\000\004\004\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\011\012\012\017" +
    "\014\001\001\000\004\005\102\001\001\000\004\006\065" +
    "\001\001\000\002\001\001\000\012\011\104\013\024\016" +
    "\020\017\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    // Connect this parser to a scanner
    Scanner s;
    Parser(Scanner s) { this.s = s; }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= FuncDef FuncCallMain 
            {
              Object RESULT =null;
		int funcDefleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funcDefright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object funcDef = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int funcCallMainleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcCallMainright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object funcCallMain = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("public class Translated {\n" + 
                            "\tpublic static void main(String[] args) {\n" + funcCallMain + "\n\t}"
                            + funcDef + "\n" +
                            "}"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // FuncCallMain ::= IDENTIFIER LPAREN ArgsFuncCallMain RPAREN FuncCallMain 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int funcCallMainleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcCallMainright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object funcCallMain = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "\t\t" + "System.out.println(" + func + "(" + args + "));\n" + funcCallMain; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncCallMain",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FuncCallMain ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncCallMain",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ArgsFuncCallMain ::= ExpInMain ArgsFuncCallMain1 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "" +  arg + args; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgsFuncCallMain",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ArgsFuncCallMain ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgsFuncCallMain",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ArgsFuncCallMain1 ::= COMMA ExpInMain ArgsFuncCallMain1 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ", " + arg + args; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgsFuncCallMain1",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ArgsFuncCallMain1 ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgsFuncCallMain1",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FuncCallMain1 ::= IDENTIFIER LPAREN ArgsFuncCallMain RPAREN 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func + "(" + args + ")"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncCallMain1",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ExpInMain ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "\"" + str + "\""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpInMain",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ExpInMain ::= FuncCallMain1 
            {
              Object RESULT =null;
		int funcCallMainleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcCallMainright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object funcCallMain = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = funcCallMain; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpInMain",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FuncDef ::= FuncDef IDENTIFIER LPAREN ArgsFuncDef FUNCPARBRAC ExpInDef RBRAC 
            {
              Object RESULT =null;
		int funcDefleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int funcDefright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object funcDef = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "\n\tpublic static String " + func +  "(" + args + ") {\n\t\treturn " + exp + ";\n\t}" + funcDef; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncDef",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FuncDef ::= IDENTIFIER LPAREN ArgsFuncDef FUNCPARBRAC ExpInDef RBRAC 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "\n\tpublic static String " + func +  "(" + args + ") {\n\t\treturn " + exp + ";\n\t}"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncDef",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ArgsFuncDef ::= IDENTIFIER ArgsFuncDef1 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "String " + arg + args; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgsFuncDef",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ArgsFuncDef ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgsFuncDef",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ArgsFuncDef1 ::= COMMA IDENTIFIER ArgsFuncDef1 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ", String " + arg + args; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgsFuncDef1",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ArgsFuncDef1 ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgsFuncDef1",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FuncCallDef ::= IDENTIFIER LPAREN ArgsFuncCallDef RPAREN 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = func + "(" + args + ")"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FuncCallDef",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ArgsFuncCallDef ::= ExpInDef ArgsFuncCallDef1 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "" + arg + args; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgsFuncCallDef",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ArgsFuncCallDef ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgsFuncCallDef",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ArgsFuncCallDef1 ::= COMMA ExpInDef ArgsFuncCallDef1 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ", " + arg + args; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgsFuncCallDef1",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ArgsFuncCallDef1 ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgsFuncCallDef1",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IfElse ::= IF LPAREN IfLog RPAREN ExpInIf ELSE ExpInIf 
            {
              Object RESULT =null;
		int ifLogleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int ifLogright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object ifLog = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ifBlockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ifBlockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ifBlock = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elseBlockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elseBlockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object elseBlock = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ifLog + " ? " + ifBlock + " : " + elseBlock; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfElse",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IfLog ::= AccInDef EQUAL ExpInDef 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "\t" + exp1 + " == " + exp2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfLog",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IfLog ::= ExpInDef PREFIX ExpInDef 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "\t" + exp2 + ".startsWith(" + exp1 + ")"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfLog",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IfLog ::= ExpInDef SUFFIX ExpInDef 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "\t" + exp2 + ".endsWith(" + exp1 + ")"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfLog",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ExpInIf ::= REVERSE ExpInIf 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "new StringBuilder(" + exp + ").reverse().toString()"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpInIf",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ExpInIf ::= ExpInIf CONCAT ExpInIf 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exp + " + " + exp1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpInIf",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ExpInIf ::= AccInDef 
            {
              Object RESULT =null;
		int accleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int accright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object acc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = acc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpInIf",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ExpInIf ::= FuncCallMain1 
            {
              Object RESULT =null;
		int funcCallMainleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcCallMainright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object funcCallMain = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = funcCallMain; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpInIf",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // AccInDef ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "\"" + str + "\""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AccInDef",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // AccInDef ::= IDENTIFIER 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = str; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AccInDef",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // AccInDef ::= IfElse 
            {
              Object RESULT =null;
		int ifElseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ifElseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ifElse = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ifElse; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AccInDef",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ExpInDef ::= REVERSE ExpInDef 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "new StringBuilder(" + exp + ").reverse().toString()"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpInDef",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ExpInDef ::= ExpInDef CONCAT ExpInDef 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exp + " + " + exp1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpInDef",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ExpInDef ::= AccInDef 
            {
              Object RESULT =null;
		int accleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int accright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object acc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = acc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpInDef",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ExpInDef ::= FuncCallMain1 
            {
              Object RESULT =null;
		int funcCallMainleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcCallMainright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object funcCallMain = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = funcCallMain; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpInDef",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
